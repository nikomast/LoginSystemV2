{"ast":null,"code":"export const login = async (username, password) => {\n  try {\n    const response = await fetch('/login/', {\n      // Adjust your API endpoint accordingly\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    if (!response.ok) throw new Error('Initial login failed');\n    const data = await response.json();\n    return data; // This data might include a 'status' indicating 2FA is required\n  } catch (error) {\n    throw error;\n  }\n};\nexport const verify2FACode = async (user_id, code) => {\n  try {\n    const response = await fetch('/verify_2fa/', {\n      // Adjust your API endpoint accordingly\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user_id,\n        code\n      })\n    });\n    if (!response.ok) throw new Error('2FA verification failed');\n    const data = await response.json();\n    return data; // Assuming successful verification returns a token\n  } catch (error) {\n    throw error;\n  }\n};\nexport const logout = async () => {\n  try {\n    const response = await fetch('/logout/', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Token ${localStorage.getItem('userToken')}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) throw new Error('Logout failed');\n  } catch (error) {\n    console.error(\"Logout error:\", error.message);\n  }\n  localStorage.removeItem('userToken');\n};\nconst register = async userData => {\n  const response = await fetch('/register/', {\n    // Adjust the URL as necessary\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userData)\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.detail || 'Registration failed');\n  }\n  return response.json(); // Assuming the backend returns a token upon successful registration\n};\nconst authService = {\n  login,\n  logout,\n  register\n};\nexport default authService;","map":{"version":3,"names":["login","username","password","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","error","verify2FACode","user_id","code","logout","localStorage","getItem","console","message","removeItem","register","userData","errorData","detail","authService"],"sources":["C:/Users/n1k0m/Documents/Pankki/frontend/src/services/authservice.js"],"sourcesContent":["export const login = async (username, password) => {\r\n  try {\r\n    const response = await fetch('/login/', { // Adjust your API endpoint accordingly\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ username, password }),\r\n    });\r\n    if (!response.ok) throw new Error('Initial login failed');\r\n    const data = await response.json();\r\n    return data; // This data might include a 'status' indicating 2FA is required\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const verify2FACode = async (user_id, code) => {\r\n  try {\r\n    const response = await fetch('/verify_2fa/', { // Adjust your API endpoint accordingly\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ user_id, code }),\r\n    });\r\n    if (!response.ok) throw new Error('2FA verification failed');\r\n    const data = await response.json();\r\n    return data; // Assuming successful verification returns a token\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n\r\nexport const logout = async () => {\r\n  try {\r\n      const response = await fetch('/logout/', {\r\n          method: 'POST',\r\n          headers: {\r\n              'Authorization': `Token ${localStorage.getItem('userToken')}`,\r\n              'Content-Type': 'application/json',\r\n          },\r\n      });\r\n      if (!response.ok) throw new Error('Logout failed');\r\n  } catch (error) {\r\n      console.error(\"Logout error:\", error.message);\r\n  }\r\n  localStorage.removeItem('userToken');\r\n};\r\n  \r\n\r\nconst register = async (userData) => {\r\n  const response = await fetch('/register/', { // Adjust the URL as necessary\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(userData),\r\n  });\r\n  if (!response.ok) {\r\n    const errorData = await response.json();\r\n    throw new Error(errorData.detail || 'Registration failed');\r\n  }\r\n  return response.json(); // Assuming the backend returns a token upon successful registration\r\n};\r\n\r\nconst authService = { login, logout, register};\r\n\r\nexport default authService;"],"mappings":"AAAA,OAAO,MAAMA,KAAK,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;EACjD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,SAAS,EAAE;MAAE;MACxCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,QAAQ;QAAEC;MAAS,CAAC;IAC7C,CAAC,CAAC;IACF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;IACzD,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAAC,CAAC;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAOC,OAAO,EAAEC,IAAI,KAAK;EACpD,IAAI;IACF,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,cAAc,EAAE;MAAE;MAC7CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEO,OAAO;QAAEC;MAAK,CAAC;IACxC,CAAC,CAAC;IACF,IAAI,CAACd,QAAQ,CAACO,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;IAC5D,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAAC,CAAC;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AAID,OAAO,MAAMI,MAAM,GAAG,MAAAA,CAAA,KAAY;EAChC,IAAI;IACA,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,UAAU,EAAE;MACrCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,eAAe,EAAG,SAAQa,YAAY,CAACC,OAAO,CAAC,WAAW,CAAE,EAAC;QAC7D,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;IACF,IAAI,CAACjB,QAAQ,CAACO,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;EACtD,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZO,OAAO,CAACP,KAAK,CAAC,eAAe,EAAEA,KAAK,CAACQ,OAAO,CAAC;EACjD;EACAH,YAAY,CAACI,UAAU,CAAC,WAAW,CAAC;AACtC,CAAC;AAGD,MAAMC,QAAQ,GAAG,MAAOC,QAAQ,IAAK;EACnC,MAAMtB,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,EAAE;IAAE;IAC3CC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACgB,QAAQ;EAC/B,CAAC,CAAC;EACF,IAAI,CAACtB,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAMgB,SAAS,GAAG,MAAMvB,QAAQ,CAACU,IAAI,CAAC,CAAC;IACvC,MAAM,IAAIF,KAAK,CAACe,SAAS,CAACC,MAAM,IAAI,qBAAqB,CAAC;EAC5D;EACA,OAAOxB,QAAQ,CAACU,IAAI,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC;AAED,MAAMe,WAAW,GAAG;EAAE5B,KAAK;EAAEkB,MAAM;EAAEM;AAAQ,CAAC;AAE9C,eAAeI,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}
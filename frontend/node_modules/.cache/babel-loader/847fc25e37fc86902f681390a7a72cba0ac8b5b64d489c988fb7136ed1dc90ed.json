{"ast":null,"code":"const login = async (username, password) => {\n  try {\n    const response = await fetch('/api/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Login failed');\n    }\n    const data = await response.json();\n    // Here you could store the received token or user details in localStorage, for example:\n    // localStorage.setItem('userToken', data.token);\n\n    return data; // This data should include the token or any other user info\n  } catch (error) {\n    console.error(\"Login error:\", error);\n    throw error; // Rethrowing the error is important for handling it in the calling component\n  }\n};\n\n// Example logout function, assuming you store a token in localStorage\nconst logout = () => {\n  // Perform any necessary cleanup, like removing the user's token from storage\n  localStorage.removeItem('userToken');\n  // You might also want to redirect the user to the login page or home page here\n};\nconst register = async userData => {\n  const response = await fetch('/api/register/', {\n    // Adjust the URL as necessary\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userData)\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.detail || 'Registration failed');\n  }\n  return response.json(); // Assuming the backend returns a token upon successful registration\n};\nconst authService = {\n  login,\n  logout,\n  register\n};\nexport default authService;","map":{"version":3,"names":["login","username","password","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","error","console","logout","localStorage","removeItem","register","userData","errorData","detail","authService"],"sources":["C:/Users/n1k0m/Documents/Pankki/frontend/src/services/authservice.js"],"sourcesContent":["const login = async (username, password) => {\r\n    try {\r\n      const response = await fetch('/api/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ username, password }),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Login failed');\r\n      }\r\n  \r\n      const data = await response.json();\r\n      // Here you could store the received token or user details in localStorage, for example:\r\n      // localStorage.setItem('userToken', data.token);\r\n      \r\n      return data; // This data should include the token or any other user info\r\n    } catch (error) {\r\n      console.error(\"Login error:\", error);\r\n      throw error; // Rethrowing the error is important for handling it in the calling component\r\n    }\r\n  };\r\n  \r\n  // Example logout function, assuming you store a token in localStorage\r\n  const logout = () => {\r\n    // Perform any necessary cleanup, like removing the user's token from storage\r\n    localStorage.removeItem('userToken');\r\n    // You might also want to redirect the user to the login page or home page here\r\n  };\r\n  \r\n\r\nconst register = async (userData) => {\r\n  const response = await fetch('/api/register/', { // Adjust the URL as necessary\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(userData),\r\n  });\r\n  if (!response.ok) {\r\n    const errorData = await response.json();\r\n    throw new Error(errorData.detail || 'Registration failed');\r\n  }\r\n  return response.json(); // Assuming the backend returns a token upon successful registration\r\n};\r\n\r\nconst authService = { login, logout, register};\r\n\r\nexport default authService;"],"mappings":"AAAA,MAAMA,KAAK,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;EACxC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,EAAE;MACzCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,QAAQ;QAAEC;MAAS,CAAC;IAC7C,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;IACjC;IAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClC;IACA;;IAEA,OAAOD,IAAI,CAAC,CAAC;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC;;AAED;AACA,MAAME,MAAM,GAAGA,CAAA,KAAM;EACnB;EACAC,YAAY,CAACC,UAAU,CAAC,WAAW,CAAC;EACpC;AACF,CAAC;AAGH,MAAMC,QAAQ,GAAG,MAAOC,QAAQ,IAAK;EACnC,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAC,gBAAgB,EAAE;IAAE;IAC/CC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACW,QAAQ;EAC/B,CAAC,CAAC;EACF,IAAI,CAACjB,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAMW,SAAS,GAAG,MAAMlB,QAAQ,CAACU,IAAI,CAAC,CAAC;IACvC,MAAM,IAAIF,KAAK,CAACU,SAAS,CAACC,MAAM,IAAI,qBAAqB,CAAC;EAC5D;EACA,OAAOnB,QAAQ,CAACU,IAAI,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC;AAED,MAAMU,WAAW,GAAG;EAAEvB,KAAK;EAAEgB,MAAM;EAAEG;AAAQ,CAAC;AAE9C,eAAeI,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}
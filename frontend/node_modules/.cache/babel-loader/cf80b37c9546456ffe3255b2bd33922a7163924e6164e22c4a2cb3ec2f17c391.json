{"ast":null,"code":"export const login = (username, password) => async dispatch => {\n  try {\n    const response = await fetch('/api/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    if (!response.ok) throw new Error('Login failed');\n    const data = await response.json();\n    dispatch({\n      type: 'LOGIN_SUCCESS',\n      payload: data.token\n    });\n    localStorage.setItem('userToken', data.token); // Optionally store the token in localStorage\n  } catch (error) {\n    dispatch({\n      type: 'LOGIN_FAILURE',\n      payload: error.message\n    });\n  }\n};\n\n// Example logout function, assuming you store a token in localStorage\nconst logout = () => {\n  // Perform any necessary cleanup, like removing the user's token from storage\n  localStorage.removeItem('userToken');\n  // You might also want to redirect the user to the login page or home page here\n};\nconst register = async userData => {\n  const response = await fetch('/register/', {\n    // Adjust the URL as necessary\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(userData)\n  });\n  if (!response.ok) {\n    const errorData = await response.json();\n    throw new Error(errorData.detail || 'Registration failed');\n  }\n  return response.json(); // Assuming the backend returns a token upon successful registration\n};\nconst authService = {\n  login,\n  logout,\n  register\n};\nexport default authService;","map":{"version":3,"names":["login","username","password","dispatch","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","type","payload","token","localStorage","setItem","error","message","logout","removeItem","register","userData","errorData","detail","authService"],"sources":["C:/Users/n1k0m/Documents/Pankki/frontend/src/services/authservice.js"],"sourcesContent":["export const login = (username, password) => async (dispatch) => {\r\n  try {\r\n      const response = await fetch('/api/login', {\r\n          method: 'POST',\r\n          headers: {'Content-Type': 'application/json'},\r\n          body: JSON.stringify({username, password}),\r\n      });\r\n      if (!response.ok) throw new Error('Login failed');\r\n\r\n      const data = await response.json();\r\n      dispatch({type: 'LOGIN_SUCCESS', payload: data.token});\r\n      localStorage.setItem('userToken', data.token); // Optionally store the token in localStorage\r\n  } catch (error) {\r\n      dispatch({type: 'LOGIN_FAILURE', payload: error.message});\r\n  }\r\n};\r\n  \r\n  // Example logout function, assuming you store a token in localStorage\r\n  const logout = () => {\r\n    // Perform any necessary cleanup, like removing the user's token from storage\r\n    localStorage.removeItem('userToken');\r\n    // You might also want to redirect the user to the login page or home page here\r\n  };\r\n  \r\n\r\nconst register = async (userData) => {\r\n  const response = await fetch('/register/', { // Adjust the URL as necessary\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(userData),\r\n  });\r\n  if (!response.ok) {\r\n    const errorData = await response.json();\r\n    throw new Error(errorData.detail || 'Registration failed');\r\n  }\r\n  return response.json(); // Assuming the backend returns a token upon successful registration\r\n};\r\n\r\nconst authService = { login, logout, register};\r\n\r\nexport default authService;"],"mappings":"AAAA,OAAO,MAAMA,KAAK,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,KAAK,MAAOC,QAAQ,IAAK;EAC/D,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,EAAE;MACvCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAC,cAAc,EAAE;MAAkB,CAAC;MAC7CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAACT,QAAQ;QAAEC;MAAQ,CAAC;IAC7C,CAAC,CAAC;IACF,IAAI,CAACE,QAAQ,CAACO,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;IAEjD,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClCX,QAAQ,CAAC;MAACY,IAAI,EAAE,eAAe;MAAEC,OAAO,EAAEH,IAAI,CAACI;IAAK,CAAC,CAAC;IACtDC,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEN,IAAI,CAACI,KAAK,CAAC,CAAC,CAAC;EACnD,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZjB,QAAQ,CAAC;MAACY,IAAI,EAAE,eAAe;MAAEC,OAAO,EAAEI,KAAK,CAACC;IAAO,CAAC,CAAC;EAC7D;AACF,CAAC;;AAEC;AACA,MAAMC,MAAM,GAAGA,CAAA,KAAM;EACnB;EACAJ,YAAY,CAACK,UAAU,CAAC,WAAW,CAAC;EACpC;AACF,CAAC;AAGH,MAAMC,QAAQ,GAAG,MAAOC,QAAQ,IAAK;EACnC,MAAMrB,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,EAAE;IAAE;IAC3CC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACe,QAAQ;EAC/B,CAAC,CAAC;EACF,IAAI,CAACrB,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAMe,SAAS,GAAG,MAAMtB,QAAQ,CAACU,IAAI,CAAC,CAAC;IACvC,MAAM,IAAIF,KAAK,CAACc,SAAS,CAACC,MAAM,IAAI,qBAAqB,CAAC;EAC5D;EACA,OAAOvB,QAAQ,CAACU,IAAI,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC;AAED,MAAMc,WAAW,GAAG;EAAE5B,KAAK;EAAEsB,MAAM;EAAEE;AAAQ,CAAC;AAE9C,eAAeI,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}